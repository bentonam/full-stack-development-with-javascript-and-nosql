user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;
events {
  worker_connections 1024;
}
http {
  log_format le_json '"time": "$time_iso8601", '
  '"remote_addr": "$remote_addr", '
  '"x-forwarded-for": "$http_x_forwarded_for", '
  '"true-client-ip": "$http_true_client_ip", '
  '"remote_user": "$remote_user", '
  '"body_bytes_sent": "$body_bytes_sent", '
  '"request_time": "$request_time", '
  '"status": "$status", '
  '"request": "$request", '
  '"request_method": "$request_method", '
  '"http_referrer": "$http_referer", '
  '"http_user_agent": "$http_user_agent"';
  access_log  /var/log/nginx/access.log  le_json;
  sendfile            off;
  tcp_nopush          on;
  tcp_nodelay         on;
  keepalive_timeout   65;
  types_hash_max_size 2048;
  gzip on;
  gzip_http_version 1.0;
  gzip_vary on;
  gzip_proxied any;
  gzip_min_length   500;
  gzip_comp_level 2;
  gzip_static on;
  gzip_disable "MSIE [1-6]\.";
  gzip_types
    text/plain
    text/xml
    text/comma-separated-values
    text/css
    text/javascript
    application/atom+xml
    application/json
    application/javascript
    application/x-javascript
    application/x-font-truetype
    application/x-font-ttf
    application/x-font-opentype
    image/svg+xml
    image/x-icon
    font/eot;

  # List of application servers
  upstream backend_server {
    least_conn;
    server demo-backend:8081 weight=10 max_fails=3 fail_timeout=30s;
  }
  upstream frontend_server {
    least_conn;
    server demo-frontend:8080 weight=10 max_fails=3 fail_timeout=30s;
  }

  # http server
  server {
    listen 80;
    server_tokens off;
    add_header X-Content-Type-Options nosniff;
    etag off;
    client_max_body_size 0;
    chunked_transfer_encoding on;

    # Proxying the connections to the api
    location /api {
      proxy_pass         http://backend_server;
      proxy_http_version 1.1;
      proxy_redirect     off;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
      proxy_cache_bypass $http_upgrade;
      add_header       X-Upstream      $upstream_addr;
    }

    location / {
      include  /etc/nginx/mime.types;

      proxy_pass         http://frontend_server;
      proxy_http_version 1.1;
      proxy_redirect     off;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
      proxy_cache_bypass $http_upgrade;
      add_header       X-Upstream      $upstream_addr;
    }
  }
}
